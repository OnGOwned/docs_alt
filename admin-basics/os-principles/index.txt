== Общие принципы работы ОС ==

=== Процессы и файлы ===

ОС (DISTRO) является многопользовательской интегрированной системой. Это
значит, что она разработана в расчете на одновременную работу нескольких
пользователей.

Пользователь может либо сам работать в системе, выполняя некоторую
последовательность команд, либо от его имени могут выполняться прикладные
процессы.

Пользователь взаимодействует с системой через командный интерпретатор, который
представляет собой, как было сказано выше, прикладную программу, которая
принимает от пользователя команды или набор команд и транслирует их в системные
вызовы к ядру системы. Интерпретатор позволяет пользователю просматривать
файлы, передвигаться по дереву файловой системы, запускать прикладные процессы.
Все командные интерпретаторы UNIX имеют развитый командный язык и позволяют
писать достаточно сложные программы, упрощающие процесс администрирования
системы и работы с ней.

==== Процессы функционирования ОС ====

Все программы, которые выполняются в текущий момент времени, называются
процессами. Процессы можно разделить на два основных класса: системные процессы
и пользовательские процессы. Системные процессы -- программы, решающие
внутренние задачи ОС, например организацию виртуальной памяти на диске или
предоставляющие пользователям те или иные сервисы (процессы-службы).

Пользовательские процессы -- процессы, запускаемые пользователем из командного
интерпретатора для решения задач пользователя или управления системными
процессами. Linux изначально разрабатывался как многозадачная система. Он
использует технологии, опробованные и отработанные другими реализациями UNIX,
которые существовали ранее.

Фоновый режим работы процесса -- режим, когда программа может работать без
взаимодействия с пользователем. В случае необходимости интерактивной работы с
пользователем (в общем случае) процесс будет «остановлен» ядром и работа его
продолжается только после переведения его в «нормальный» режим работы.

==== Файловая система ОС ====

В ОС использована файловая система Linux, которая в отличие от файловых систем
DOS и Windows(™) является единым деревом. Корень этого дерева -- каталог,
называемый root (рут), и обозначаемый `/`. Части дерева файловой системы могут
физически располагаться в разных разделах разных дисков или вообще на других
компьютерах, -- для пользователя это прозрачно. Процесс присоединения файловой
системы раздела к дереву называется монтированием, удаление -- размонтированием.
Например, файловая система CD-ROM в изделии монтируется по умолчанию в каталог
`/media/cdrom` (путь в изделии обозначается с использованием `/`, а не `\`, как в
DOS/Windows). Текущий каталог обозначается `./`.

Файловая система изделия содержит каталоги первого уровня:

* `/bin` -- командные оболочки (shell), основные утилиты;
* `/boot` -- содержит ядро системы;
* `/dev` -- псевдофайлы устройств, позволяющие работать с ними напрямую;
* `/etc` -- файлы конфигурации;
* `/home` -- личные каталоги пользователей;
* `/lib` -- системные библиотеки, модули ядра;
* `/media` -- каталоги для монтирования файловых систем сменных устройств;
* `/mnt`  -- каталоги для монтирования файловых систем сменных устройств и
внешних файловых систем;
* `/proc` -- файловая система на виртуальном устройстве, её файлы содержат
информацию о текущем состоянии системы;
* `/root` -- личный каталог администратора системы;
* `/sbin` -- системные утилиты;
* `/sys` -- файловая система, содержащая информацию о текущем состоянии системы;
* `/usr` -- программы и библиотеки, доступные пользователю;
* `/var` -- рабочие файлы программ, очереди, журналы;
* `/tmp` -- временные файлы.

==== Организация файловой структуры ====

Система домашних каталогов пользователей помогает организовывать безопасную
работу пользователей в многопользовательской системе. Вне своего домашнего
каталога пользователь обладает минимальными правами (обычно чтение и выполнение
файлов) и не может нанести ущерб системе, например, удалив или изменив файл.

Кроме файлов созданных пользователем, в его домашнем каталоге обычно содержатся
персональные конфигурационные файлы некоторых программ.

Маршрут (путь) -- это последовательность имён каталогов, представляющий собой
путь в файловой системе к данному файлу, где каждое следующее имя отделяется от
предыдущего наклонной чертой (слэшем). Если название маршрута начинается со
слэша, то путь в искомый файл начинается от корневого каталога всего дерева
системы. В обратном случае, если название маршрута начинается непосредственно с
имени файла, то путь к искомому файлу должен начаться от текущего каталога
(рабочего каталога).

Имя файла может содержать любые символы за исключением косой черты (/). Однако
следует избегать применения в именах файлов большинства знаков препинания и
непечатаемых символов. При выборе имен файлов рекомендуем ограничиться
следующими символам:

* строчные и ПРОПИСНЫЕ буквы. Следует обратить внимание на то, что регистр
всегда имеет значение;
* символ подчеркивания ( _ );
* точка ( . ).

Для удобства работы можно использовать для отделения имени файла от расширения
файла. Данная возможность может быть необходима пользователям или некоторым
программам, но не имеет значение для shell.

==== Иерархическая организация файловой системы ====

Каталог `/`:

* `/boot` -- место где хранятся файлы необходимые для загрузки ядра системы;
* `/lib` -- здесь располагаются файлы динамических библиотек, необходимых для
работы большей части приложений и подгружаемые модули ядра;
* `/bin` -- минимальный набор программ необходимых для работы в системе;
* `/sbin` -- набор программ для административной работы с системой (программы
необходимые только суперпользователю);
* `/home` -- здесь располагаются домашний каталоги пользователей;
* `/etc` -- в данном каталоге обычно хранятся общесистемные конфигурационные
файлы для большинства программ в системе;
* `/etc/rc?.d`, `/etc/init.d`, `/etc/rc.boot`, `/etc/rc.d` -- директории, где
расположены командные файлы, выполняемые при запуске системы или при смене её
режима работы;
* `/etc/passwd` -- база данных пользователей, в которой содержится информация
об имени пользователя, его настоящем имени, личном каталоге, зашифрованный
пароль и другие данные;
* `/etc/shadow` -- теневая база данных пользователей. При этом информация из
файла `/etc/passwd` перемещается в `/etc/shadow`, который недоступен по чтению
всем, кроме пользователя root. В случае использования альтернативной схемы
управления теневыми паролями (TCB) все теневые пароли для каждого пользователя
располагаются в директории `/etc/tcb/<имя пользователя>/shadow`;
* `/dev` -- в этом каталоге находятся файлы устройств. Файлы в /dev создаются
сервисом udev;
* `/usr` -- обычно файловая система `/usr` достаточно большая по объему, так
как все программы установлены именно здесь. Вся информация в каталоге `/usr`
помещается туда во время установки системы. Отдельно устанавливаемые пакеты
программ и другие файлы размещаются в каталоге;
* `/usr/local` -- некоторые подкаталоги системы /usr рассмотрены ниже;
* `/usr/bin` -- практически все команды, хотя некоторые находятся в `/bin` или
в `/usr/local/bin`;
* `/usr/sbin` -- команды, используемые при администрировании системы и не
предназначенные для размещения в файловой системе root;
* `/usr/local` -- здесь рекомендуется размещать файлы установленные без
использования пакетных менеджеров, внутренняя организация каталогов практически
такая же как и корневого каталога;
* `/usr/man` -- каталог где хранятся файлы справочного руководства man;
* `/usr/share` -- каталог для размещения общедоступных файлов большей части
приложений.

Каталог `/var`:

* `/var/log` -- место, где хранятся файлы аудита работы системы и приложений;
* `/var/spool` -- каталог для хранения файлов находящих в очереди на обработку
для того или иного процесса (очередь на печать, отправку почты и т.д.).

`/tmp` -- временный каталог необходимый некоторым приложениям.

`/proc` -- файловая система `/proc` является виртуальной и в действительности
она не существует на диске. Ядро создает её в памяти компьютера. Система
`/proc` предоставляет информацию о системе.

==== Имена дисков и разделов ====

Все физические устройства вашего компьютера отображаются в каталог `/dev`
файловой систем изделия (об этом -- ниже). Диски (в том числе IDE/SATA/SCSI
жёсткие диски, USB-диски имеют имена:

* `/dev/sda` -- первый диск;
* `/dev/sdb` -- второй диск;
* и т.д.

Диски обозначаются `/dev/sdX`, где `X` -- `a`, `b`, `c`, `d`, `e`, ... в
зависимости от порядкового номера диска на шине.

Раздел диска обозначается числом после его имени. Например, `/dev/sdb4` --
четвертый раздел второго диска.

==== Разделы, необходимые для работы ОС ====

Для работы ОС необходимо создать на жестком диске (дисках) по крайней мере два
раздела: корневой (то есть тот, который будет содержать каталог `/` ) и раздел
подкачки (swap). Размер последнего, как правило, составляет от однократной до
двукратной величины оперативной памяти компьютера. Если у вас много свободного
места на диске, то можно создать отдельные разделы для каталогов `/usr`,
`/home`, `/var`.

==== Утилиты для работы с файловой системой ====

`mkfs` -- создание файловой системы. В действительности это программа-оболочка,
вызывающая для каждого конкретного типа файловых систем свою программу.
Например, для файловой системы `ext4` будет вызвана `mkfs.ext4`.

`fsck` -- используется для проверки и восстановления, если это возможно,
целостности файловых систем.

`df` -- формирует отчет о доступном и использованном дисковом пространстве на
файловых системах. Без аргументов, `df` выдает отчет по доступному и
использованному пространству для всех файловых систем (всех типов), которые
смонтированы в данный момент. В противном случае, `df` на каждый файл, заданный
как аргумент, выдается отчет по файловой системе, которая его содержит.

`du` -- формирует отчет об использовании дискового пространства заданными
файлами, а также каждым каталогом иерархии подкаталогов каждого указанного
каталога.  Здесь под использованным дисковым пространством понимается
пространство, используемое для всей иерархии подкаталогов указанного каталога.
Запущенная без аргументов, команда `du` выдает отчет о дисковом пространстве
для текущего каталога.

Часто используемые утилиты:

* `mount` -- монтирование файловых систем;
* `umount` -- размонтирование файловых систем;
* `find` -- поиск файлов в директориях;
* `which` -- поиск файла который будет запущен при выполнении данной команды
* `cd` -- смена текущего каталога/директории;
* `pwd` -- показать текущий каталог/директорию;
* `mkdir` -- создание каталога;
* `ls` -- выдача информации о файлах или каталогах;
* `cp` -- копирование файлов;
* `mv` -- перемещение/переименование файлов;
* `rm` -- удаление файлов;
* `cat` -- вывод содержимого заданных файлов на стандартный вывод;
* `more` -- программа постраничного просмотра файлов;
* `ln` -- создание ссылок (альтернативных имен) для файлов;
* `file` -- определение типа файла;
* `chmod` -- изменение прав доступа к файлам;
* `chown` -- смена прав владения (пользовательских и групповых) для файлов;
* `umask` -- установка маски прав доступа для вновь создаваемых файлов;
* `chattr` -- изменение атрибутов файлов;
* `lsattr` -- просмотр атрибутов файлов;

=== Работа с наиболее часто используемыми компонентами ===

==== Командные оболочки (интерпретаторы) ====

Как было сказано выше, для управления ОС используется командные интерпретаторы
(shell).

Зайдя в систему, Вы увидите приглашение -- строку, содержащую символ «$» (далее,
этот символ будет обозначать командную строку. Программа ожидает ваших команд.
Роль командного интерпретатора -- передавать ваши команды операционной системе.
По своим функциям он соответствует command.com в DOS, но несравненно мощнее.
При помощи командных интерпретаторов можно писать небольшие программы --
сценарии (скрипты). В Linux доступны следующие командные оболочки:

* `bash` -- самая распространенная оболочка под linux. Она ведет историю команд и
предоставляет возможность их редактирования;
* `pdksh` -- клон korn shell, хорошо известной оболочки в UNIX(TM) системах.

Оболочкой по умолчанию является «Bash» (Bourne Again Shell). Чтобы проверить,
какую оболочку Вы используете, наберите команду:

-----------
echo $SHELL
-----------

У каждой оболочки свой синтаксис. Мы рекомендуем Вам использовать Bash. В
дальнейшем мы будем строить свои примеры с использованием этой оболочки.

===== Командная оболочка Bash =====

В bash имеется несколько приемов для работы со строкой команд. Например,
используя клавиатуру, вы можете:

* *Ctrl+A* -- перейти на начало строки;
* *Ctrl+U* -- удалить текущую строку;
* *Ctrl+C* -- остановить текущую задачу.

Вы можете использовать «;» для того, чтобы ввести несколько команд одной
строкой. Клавиши *Стрелка вверx* и *Стрелка вниз*, позволяют Вам перемещаться
по истории команд. Для того, чтобы найти конкретную команду в списке набранных,
не пролистывая всю историю, наберите *Ctrl+R*.

Команды, присутствующие в истории, отображаются в списке пронумерованными. Для
того, чтобы запустить конкретную команду наберите:

---------------
! номер команды
---------------

если вы введете:

------
!!
------

запустится последняя, из набранных команд.

Иногда, имена программ и команд слишком длинны. К счастью, Bash сам может
завершать имена.

Нажав клавишу *Tab*, вы можете завершить имя команды, программы или каталога.
Например, предположим, что Вы хотите использовать программу декомпрессии
`bunzip2`. Для этого наберите:

------
bu
------

затем нажмите *Tab*. Если ничего не происходит, то вероятно существует
несколько возможных вариантов завершения команды.

Нажав клавишу *Tab* еще раз, вы получите список имен начинающихся с «bu».

Например у вас есть:

-------------------------
$ bu
buildhash builtin bunzip2
-------------------------

Наберите:

-
n
-

(`bunzip` -- это единственное имя, третьей буквой которого является «n»), а
затем нажмите клавишу табуляции. Оболочка дополнит имя и вам остается лишь
нажать *Enter*, чтобы запустить команду.

Заметим, что программу, вызываемую из командной строки, Bash ищет в каталогах,
определяемых в системной переменной PATH. По умолчанию, в этот перечень
каталогов не входит текущий каталог, обозначаемый `./` (точка слэш) (если
только вы не выбрали один из двух самых слабых уровней защиты, см. об этом
ниже). Поэтому, для запуска программы prog из текущего каталога, надо дать
команду: `./prog`.

===== Базовые команды оболочки Bash =====

Все команды, приведенные ниже, могут быть быть запущены в режиме консоли.  Для
получения более подробной информации используйте команду `man`. Пример:

------
man ls
------

Команда `su`:

Позволяет Вам получить права администратора. Когда вы набираете `su`, оболочка
запрашивает у вас пароль суперпользователя (root). Введите пароль и нажмите
*Enter*: теперь вы получили привилегии суперпользователя. Чтобы вернуться к
правам вашего пользовательского бюджета, наберите `exit`.

Команда `cd`:

Позволяет сменить каталог. Она работает как с абсолютными, так и с
относительными путями.  Предположим, что Вы находитесь в своем домашнем
каталоге и хотите перейти в его подкаталог `docs/`. Для этого, введите
относительный путь:

--------
cd docs/
--------

Чтобы перейти в каталог `/usr/bin`, наберите (абсолютный путь):


------------
cd /usr/bin/
------------

Некоторые варианты команды:


-----
cd ..
-----

позволяет вам сделать текущим родительский каталог (обратите внимание на пробел
между `cd` и `..`).

----
cd -
----

позволяет вам вернуться в предыдущий каталог. Команда `cd`, без параметров
переводит вас в ваш домашний каталог.

Команда `ls`:

`ls` (list) выдает список файлов в текущем каталоге. Две основные опции: `-a`
-- просмотр всех файлов, включая скрытые, `-l` -- отображение более подробной
информации.

Команда `rm`:

Эта команда используется для удаления файлов.

Внимание: удалив файл, вы не сможете его восстановить!

Синтаксис:

------------
rm имя_файла
------------

У данной программы существует ряд параметров. Самые часто используемые: `-i` --
запрос на удаление файла, `-r` -- рекурсивное удаление (т.е. удаление, включая
подкаталоги и скрытые файлы).

Пример:

-------------------
rm -i ~/html/*.html
-------------------

Удаляет все файлы html, в вашем каталоге html.

Команды `mkdir` и `rmdir`:

Команда `mkdir` позволяет создать каталог, тогда как `rmdir` удаляет каталог,
при условии, что он пуст.

Синтаксис:

------------------
mkdir имя_каталога
------------------

------------------
rmdir имя_каталога
------------------

Команда `rmdir` часто заменяется командой `rm -rf`, которая позволяет вам
удалять каталоги, даже если они не пусты.

Команда `less`:

`less` позволяет вам постранично просматривать текст.

Синтаксис:


--------------
less имя_файла
--------------

Крайне полезно просмотреть файл, перед тем как его редактировать. Для выхода
нажмите *q*.

Команда `grep`:

Данная команда имеет много опций и предоставляет возможности поиска символьной
строки в файле.

Синтаксис:


-----------------------
grep шаблон_поиска файл
-----------------------

Команда `ps`:

Отображает список текущих процессов. Колонка команд указывает имя процесса,
колонка PID (идентификатор процесса) -- номер процесса (этот номер используется,
для операций с процессом, например чтобы завершить его командой `kill`).

Синтаксис:

------------
ps аргументы
------------

Аргумент `u` предоставляет вам больше информации, `ax` позволяет вам
просмотреть те процессы, которые не принадлежат вам (такие как те, что были
запущены во время процесса загрузки.).

Команда `kill`:

Если программа перестала отвечать или зависла, используйте данную команду,
чтобы её завершить.

Синтаксис:

--------------
kill PID_номер
--------------

Иногда, необходимо будет использовать `kill -9 PID_номер` (когда обычная
команда `kill` не дает желательного эффекта). Номер PID выясняется при помощи
команды `ps`.

=== Использование многозадачности ===

(DISTRO) -- это многозадачная система. Продемонстрируем на двух примерах, как
это можно использовать.

Первый пример -- запуск программы в фоновом режиме. Для того, чтобы это сделать,
вам нужно, лишь, набрать «&» после имени программы. После этого, оболочка дает
вам возможность запускать другие приложения. Будьте осторожны, так как
некоторые программы интерактивны, и их запуск в фоновом режиме бессмысленен
(подобные программы просто остановятся, будучи запущенными, в фоновом режиме).
Для того, чтобы вернуть их в обычный режим, наберите:

----------------
fg имя_программы
----------------

Второй метод представляет собой запуск нескольких независимых сеансов. В
консоли, нажмите *Alt* и одну из клавиш, находящихся в интервале от *F1* до
*F6*. На экране появится новое приглашение системы, и вы сможете открыть новый
сеанс. Этот метод также позволяет вам работать на другой консоли, если консоль
которую вы использовали до этого, не отвечает, или вам необходимо остановить
зависшую программу.

